/*
* generated by Xtext
*/
grammar InternalXDockerLang;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.laegler.xdocker.lang.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.laegler.xdocker.lang.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.laegler.xdocker.lang.services.XDockerLangGrammarAccess;

}

@parser::members {
 
 	private XDockerLangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XDockerLangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleXDockerModel
entryRuleXDockerModel 
:
{ before(grammarAccess.getXDockerModelRule()); }
	 ruleXDockerModel
{ after(grammarAccess.getXDockerModelRule()); } 
	 EOF 
;

// Rule XDockerModel
ruleXDockerModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXDockerModelAccess().getInstructionAssignment()); }
(rule__XDockerModel__InstructionAssignment)*
{ after(grammarAccess.getXDockerModelAccess().getInstructionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXDockerInstruction
entryRuleXDockerInstruction 
:
{ before(grammarAccess.getXDockerInstructionRule()); }
	 ruleXDockerInstruction
{ after(grammarAccess.getXDockerInstructionRule()); } 
	 EOF 
;

// Rule XDockerInstruction
ruleXDockerInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXDockerInstructionAccess().getAlternatives()); }
(rule__XDockerInstruction__Alternatives)
{ after(grammarAccess.getXDockerInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXDockerFrom
entryRuleXDockerFrom 
:
{ before(grammarAccess.getXDockerFromRule()); }
	 ruleXDockerFrom
{ after(grammarAccess.getXDockerFromRule()); } 
	 EOF 
;

// Rule XDockerFrom
ruleXDockerFrom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXDockerFromAccess().getNameAssignment()); }
(rule__XDockerFrom__NameAssignment)
{ after(grammarAccess.getXDockerFromAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXDockerMaintainer
entryRuleXDockerMaintainer 
:
{ before(grammarAccess.getXDockerMaintainerRule()); }
	 ruleXDockerMaintainer
{ after(grammarAccess.getXDockerMaintainerRule()); } 
	 EOF 
;

// Rule XDockerMaintainer
ruleXDockerMaintainer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXDockerMaintainerAccess().getNameAssignment()); }
(rule__XDockerMaintainer__NameAssignment)
{ after(grammarAccess.getXDockerMaintainerAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXDockerRun
entryRuleXDockerRun 
:
{ before(grammarAccess.getXDockerRunRule()); }
	 ruleXDockerRun
{ after(grammarAccess.getXDockerRunRule()); } 
	 EOF 
;

// Rule XDockerRun
ruleXDockerRun
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXDockerRunAccess().getNameAssignment()); }
(rule__XDockerRun__NameAssignment)
{ after(grammarAccess.getXDockerRunAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__XDockerInstruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXDockerInstructionAccess().getXDockerFromParserRuleCall_0()); }
	ruleXDockerFrom
{ after(grammarAccess.getXDockerInstructionAccess().getXDockerFromParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getXDockerInstructionAccess().getXDockerMaintainerParserRuleCall_1()); }
	ruleXDockerMaintainer
{ after(grammarAccess.getXDockerInstructionAccess().getXDockerMaintainerParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getXDockerInstructionAccess().getXDockerRunParserRuleCall_2()); }
	ruleXDockerRun
{ after(grammarAccess.getXDockerInstructionAccess().getXDockerRunParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__XDockerModel__InstructionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXDockerModelAccess().getInstructionXDockerInstructionParserRuleCall_0()); }
	ruleXDockerInstruction{ after(grammarAccess.getXDockerModelAccess().getInstructionXDockerInstructionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XDockerFrom__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXDockerFromAccess().getNameFROMTerminalRuleCall_0()); }
	RULE_FROM{ after(grammarAccess.getXDockerFromAccess().getNameFROMTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XDockerMaintainer__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXDockerMaintainerAccess().getNameMAINTAINERTerminalRuleCall_0()); }
	RULE_MAINTAINER{ after(grammarAccess.getXDockerMaintainerAccess().getNameMAINTAINERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XDockerRun__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXDockerRunAccess().getNameRUNTerminalRuleCall_0()); }
	RULE_RUN{ after(grammarAccess.getXDockerRunAccess().getNameRUNTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_FROM : 'FROM' RULE_NNL* RULE_NL;

RULE_MAINTAINER : 'MAINTAINER' RULE_NNL* RULE_NL;

RULE_RUN : 'RUN' RULE_NNL* RULE_NL;

RULE_EXAMPLE_HEADING : 'Examples' RULE_SPACES ':' RULE_SPACES '\r'? '\n';

fragment RULE_NNL : ~(('\r'|'\n'));

fragment RULE_NL : '\r'? '\n'?;

fragment RULE_SPACES : (' '|'\t')*;

RULE_FEATURE_TEXT : ('Narrative:'|'Feature:') RULE_NNL* RULE_NL;

RULE_IN_ORDER_TO : 'In order to' RULE_NNL* RULE_NL;

RULE_AS_A : 'As a' RULE_NNL* RULE_NL;

RULE_I_WANT_TO : 'I want to ' RULE_NNL* RULE_NL;

RULE_SCENARIO_TEXT : 'Scenario' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_SCENARIO_OUTLINE_TEXT : 'Scenario' RULE_SPACES 'Outline' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_BACKGROUND_TEXT : 'Background' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_WHEN_TEXT : 'When ' RULE_NNL* RULE_NL;

RULE_THEN_TEXT : 'Then ' RULE_NNL* RULE_NL;

RULE_GIVEN_TEXT : 'Given ' RULE_NNL* RULE_NL;

RULE_AND_TEXT : 'And ' RULE_NNL* RULE_NL;

RULE_EXAMPLE_ROW_END : '|' RULE_SPACES RULE_NL;

RULE_EXAMPLE_CELL : '|' ~(('\r'|'\n'|'|'))+;

RULE_CODE : ('"""' ( options {greedy=false;} : . )*'"""'|'\'\'\'' ( options {greedy=false;} : . )*'\'\'\'');

RULE_TAG : '@' RULE_NNL+ RULE_NL;

RULE_SL_COMMENT : '#' RULE_NNL+ RULE_NL;

RULE_TEXT : ~(('|'|' '|'\t'|'\r'|'\n'|'@')) RULE_NNL* RULE_NL;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;



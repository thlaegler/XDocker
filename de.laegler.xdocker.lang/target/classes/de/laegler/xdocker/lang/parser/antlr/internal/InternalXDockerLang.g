/*
* generated by Xtext
*/
grammar InternalXDockerLang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.laegler.xdocker.lang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.laegler.xdocker.lang.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.laegler.xdocker.lang.services.XDockerLangGrammarAccess;

}

@parser::members {

 	private XDockerLangGrammarAccess grammarAccess;
 	
    public InternalXDockerLangParser(TokenStream input, XDockerLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "XDockerModel";	
   	}
   	
   	@Override
   	protected XDockerLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleXDockerModel
entryRuleXDockerModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDockerModelRule()); }
	 iv_ruleXDockerModel=ruleXDockerModel 
	 { $current=$iv_ruleXDockerModel.current; } 
	 EOF 
;

// Rule XDockerModel
ruleXDockerModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDockerModelAccess().getInstructionXDockerInstructionParserRuleCall_0()); 
	    }
		lv_instruction_0_0=ruleXDockerInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDockerModelRule());
	        }
       		add(
       			$current, 
       			"instruction",
        		lv_instruction_0_0, 
        		"XDockerInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleXDockerInstruction
entryRuleXDockerInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDockerInstructionRule()); }
	 iv_ruleXDockerInstruction=ruleXDockerInstruction 
	 { $current=$iv_ruleXDockerInstruction.current; } 
	 EOF 
;

// Rule XDockerInstruction
ruleXDockerInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXDockerInstructionAccess().getXDockerFromParserRuleCall_0()); 
    }
    this_XDockerFrom_0=ruleXDockerFrom
    { 
        $current = $this_XDockerFrom_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXDockerInstructionAccess().getXDockerMaintainerParserRuleCall_1()); 
    }
    this_XDockerMaintainer_1=ruleXDockerMaintainer
    { 
        $current = $this_XDockerMaintainer_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXDockerInstructionAccess().getXDockerRunParserRuleCall_2()); 
    }
    this_XDockerRun_2=ruleXDockerRun
    { 
        $current = $this_XDockerRun_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXDockerFrom
entryRuleXDockerFrom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDockerFromRule()); }
	 iv_ruleXDockerFrom=ruleXDockerFrom 
	 { $current=$iv_ruleXDockerFrom.current; } 
	 EOF 
;

// Rule XDockerFrom
ruleXDockerFrom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_FROM
		{
			newLeafNode(lv_name_0_0, grammarAccess.getXDockerFromAccess().getNameFROMTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXDockerFromRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FROM");
	    }

)
)
;





// Entry rule entryRuleXDockerMaintainer
entryRuleXDockerMaintainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDockerMaintainerRule()); }
	 iv_ruleXDockerMaintainer=ruleXDockerMaintainer 
	 { $current=$iv_ruleXDockerMaintainer.current; } 
	 EOF 
;

// Rule XDockerMaintainer
ruleXDockerMaintainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_MAINTAINER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getXDockerMaintainerAccess().getNameMAINTAINERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXDockerMaintainerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MAINTAINER");
	    }

)
)
;





// Entry rule entryRuleXDockerRun
entryRuleXDockerRun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDockerRunRule()); }
	 iv_ruleXDockerRun=ruleXDockerRun 
	 { $current=$iv_ruleXDockerRun.current; } 
	 EOF 
;

// Rule XDockerRun
ruleXDockerRun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_RUN
		{
			newLeafNode(lv_name_0_0, grammarAccess.getXDockerRunAccess().getNameRUNTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXDockerRunRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"RUN");
	    }

)
)
;







RULE_FROM : 'FROM' RULE_NNL* RULE_NL;

RULE_MAINTAINER : 'MAINTAINER' RULE_NNL* RULE_NL;

RULE_RUN : 'RUN' RULE_NNL* RULE_NL;

RULE_EXAMPLE_HEADING : 'Examples' RULE_SPACES ':' RULE_SPACES '\r'? '\n';

fragment RULE_NNL : ~(('\r'|'\n'));

fragment RULE_NL : '\r'? '\n'?;

fragment RULE_SPACES : (' '|'\t')*;

RULE_FEATURE_TEXT : ('Narrative:'|'Feature:') RULE_NNL* RULE_NL;

RULE_IN_ORDER_TO : 'In order to' RULE_NNL* RULE_NL;

RULE_AS_A : 'As a' RULE_NNL* RULE_NL;

RULE_I_WANT_TO : 'I want to ' RULE_NNL* RULE_NL;

RULE_SCENARIO_TEXT : 'Scenario' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_SCENARIO_OUTLINE_TEXT : 'Scenario' RULE_SPACES 'Outline' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_BACKGROUND_TEXT : 'Background' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_WHEN_TEXT : 'When ' RULE_NNL* RULE_NL;

RULE_THEN_TEXT : 'Then ' RULE_NNL* RULE_NL;

RULE_GIVEN_TEXT : 'Given ' RULE_NNL* RULE_NL;

RULE_AND_TEXT : 'And ' RULE_NNL* RULE_NL;

RULE_EXAMPLE_ROW_END : '|' RULE_SPACES RULE_NL;

RULE_EXAMPLE_CELL : '|' ~(('\r'|'\n'|'|'))+;

RULE_CODE : ('"""' ( options {greedy=false;} : . )*'"""'|'\'\'\'' ( options {greedy=false;} : . )*'\'\'\'');

RULE_TAG : '@' RULE_NNL+ RULE_NL;

RULE_SL_COMMENT : '#' RULE_NNL+ RULE_NL;

RULE_TEXT : ~(('|'|' '|'\t'|'\r'|'\n'|'@')) RULE_NNL* RULE_NL;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;


